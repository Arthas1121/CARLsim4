/*!

\page ch1_getting_started Chapter 1: Getting Started

\tableofcontents

\section ch1s1_preinstallation 1.1 Pre-Installation
\author Kristofor D. Carlson

CARLsim currently requires the NVIDIA CUDA parallel computing platform to be installed
even if one does not plan to use the GPU implementation.
Future version are planned that allow users to run the CPU implementation without having CUDA installed.

CARLsim requires GPUs with a compute capability of 2.0 or higher.
To find the compute capability of your device please refer to the
<a href="http://en.wikipedia.org/wiki/CUDA" target="_blank"><b>CUDA article on Wikipedia</b></a>.

CARLsim also requires CUDA Toolkit 5.0 or higher.
For platform-specific CUDA installation instructions, please navigate to the
<a href="https://developer.nvidia.com/cuda-zone" target="_blank"><b>NVIDIA CUDA Zone</b></a>.

The rest of the chapter assumes you have successfully installed CUDA on appropriate hardware.


\subsection ch1s1s1_os 1.1.1 Supported Operating Systems
CARLsim has been tested on the following platforms:
- Windows 7
- Windows 8
- Ubuntu 12.04
- Ubuntu 12.10
- Ubuntu 13.04
- Ubuntu 13.10
- Ubuntu 14.04
- Arch Linux
- CentOS 6
- OpenSUSE 13.1
- Mac OS X

\subsection ch1s1s2_os 1.1.2 Source Directory Layout
Below is the directory layout of the CARLsim source code.
All source code of the core library is contained in the directory <tt>carlsim</tt>.
The sub-directories are key components to the CARLsim simulation library.

The <tt>doc</tt> directory contains doxygen-related source files in <tt>source</tt> and the
pre-compiled HTML version of the documentation in <tt>html</tt>.

The <tt>projects</tt> directory contains a template for writing your first CARLsim program. Users will
start here when they begin writing their first program.

The <tt>tools</tt> directory contains a
number of CARLsim plugins that may be useful to users such as parameter tuning frameworks, MATLAB
scripts, spike generators, and tools for visual stimuli.

\code
├── carlsim                       # CARLsim source code directory
│   ├── connection_monitor          # Utility to record synaptic data
│   ├── group_monitor               # Utility to record neuron group data
│   ├── interface                   # CARLsim interface (public user interface)
│   ├── kernel                      # CARLsim core functionality
│   ├── server                      # Utility to implement real-time server functionality
│   ├── spike_monitor               # Utility to record neuron spike data
│   └── test                        # Google test regression suite tests
├── doc                           # CARLsim documentation generation directory
│   ├── html                        # Generated documentation in html
│   └── source                      # Documentation source code
├── projects                      # User projects directory
│   └── hello_world                 # Project template for new users
└── tools                         # CARLsim tools that are not built-in
    ├── ecj_pti                     # Automated parameter-tuning interface using ECJ
    ├── eo_pti                      # Automated parameter-tuning interface using EO (deprecated)
    ├── offline_analysis_toolbox    # Collection of MATLAB scripts for data analysis
    ├── simple_weight_tuner         # Simple weight parameter-tuning tool
    ├── spike_generators            # Collection of input spike generation tools
    └── visual_stimulus             # Collection of MATLAB/CARLsim tools for visual stimuli
\endcode

\since v3.0


\section ch1s2_installation 1.2 Installation
\author Kristofor D. Carlson
\author Ting-Shuo Chou
\author Michael Beyeler

To install CARLsim, first download and unzip the zip file from the
<a href="http://www.socsci.uci.edu/~jkrichma/CARLsim/index.html">CARL website</a>.
For installation instructions on Linux and Mac OS X platforms, please refer to \ref ch1s2s1_linux below.
For installation instructions on Windows platforms, please refer to \ref ch1s2s2_windows below.


\subsection ch1s2s1_linux 1.2.1 Linux / Mac OS X

Instructions for Linux/Mac OS X installation assume you are using the Bash shell. Additionally, the
GNU GCC compiler collection and GNU Make build environment should be installed. 
On most platforms, these are already installed by default.

After you have unzipped the downloaded CARLsim files, you can either install CARLsim in its default
location, or in a user-specified directory.


\subsubsection ch1s2s1s1_default_location 1.2.1.1 Default Installation

The easiest way to install CARLsim is through two simple commands:

\code
$ make -j8
$ sudo make install
\endcode

The first command will compile all source code (<tt>-j8</tt> launching 8 threads to speed up
installation), and the second command will install the library in the default location,
which is <tt>/usr/local/include/carlsim</tt> for include files and <tt>/usr/local/lib</tt>
for the libary itself.

The CARLsim installation will automatically detect your OS, bit architecture, and CUDA version.

By default, the above command will compile a <tt>release</tt> build, which has all debug flags
turned off and hardware acceleration enabled (<tt>-O3 --fast-math</tt>).
Alternatively, a <tt>debug</tt> build can be compiled, which has all debug flags turned on
and hardware acceleration turned off (<tt>-O0</tt>):

\code
$ make
$ make release      # release build, same as default: no debug prints, hardware acceleration on
$ make debug        # debug build: all debug flags, hardware acceleration off
\endcode

More options can be found via command <tt>make help</tt>.


\subsubsection ch1s2s1s2_custom_location 1.2.1.2 Custom Installation

If you wish to install CARLsim in a different directory, you can specify a directory with
an environment variable, which is to be put in your <tt>~/.bashrc</tt> file:

\code
# specify custom installation directory
export CARLSIM4_INSTALL_DIR=~/carlsim
\endcode

After you edited and saved the <tt>~/.bashrc</tt> file, make sure to <tt>source</tt> it:

\code
$ source ~/.bashrc
\endcode

In order for this specification to take effect in the installation procedure, make sure you turn
the <tt>-E</tt> flag on during installation, otherwise <tt>sudo</tt> will not find the environment
variable:

\code
$ make -j8
$ sudo -E make install
\endcode



\subsubsection ch1s2s1s3_troubleshooting 1.2.1.3 Troubleshooting the Installation

CARLsim4 has been tested on a number of Unix platforms including Ubuntu 12.04 and Mac OS X
(for a complete list, see \ref ch1s1s1_os).

However, if things do go wrong, there are a few things to look out for:

- Installation assumes that CUDA is installed in <tt>/usr/local/cuda</tt>. If this is not the case
  for your system, you can override this path with an environment variable <tt>CUDA_PATH</tt> in
  your <tt>~/.bashrc</tt>.
- Installation assumes that Google Test is installed in <tt>/opt/gtest</tt>. If this is not the case
  for your system, you can override this path with an environment variable <tt>GTEST_DIR</tt> in
  your <tt>~/.bashrc</tt>. For more information see \ref ch11_regression_suite.
- Installation assumes that ECJ is installed in <tt>/opt/ecj</tt>. The ECJ PTI requires a few additional
  environment variables, which can be set in your <tt>~/.bashrc</tt>.
  For more information see \ref ch10_ecj.
- The CARLsim4 installation tries to automatically detect your OS, bit architecture, and CUDA version.
  This happens in the file <tt>carlsim/configure.mk</tt>. If something goes wrong, you can always browse
  the file and hardcode the necessary flags yourself. Or reach out to us for support.




\subsection ch1s2s2_windows 1.2.2 Windows

CARLsim provides solution files for Microsoft Visual Studio (VS) 2012 and CUDA 5.5.
The solution file is called <tt>CARLsim.sln</tt> and is located in the CARLsim root directory.
In addition, every project, tutorial, and the regression suite have their own .vcxproj projects file
in the appropriate directory.

Before building the solution, <tt>Configuration</tt> should be set to <tt>x64</tt>.
<tt>Release</tt> should be selected for project executables, and <tt>Debug</tt> should be selected
for compiling the regression suite.

VS 2012 will then generate all executables (.exe) and the static library (.lib) via "Build Solution".

Newer VS versions will automatically upgrade the solution file (<tt>CARLsim.sln</tt>) and all project files
(<tt>*.vcxproj</tt>).
For newer CUDA Toolkit versions, the strings "CUDA 5.5.props" and "CUDA 5.5.targets" that are present in
every .vcxproj file have to be manually updated to reflect the right CUDA Toolkit version number.

CARLsim comes with an optional automated parameter tuning framework. For more information about
how to install the framework please see \ref ch10_ecj. Additionally, CARLsim now comes with a
regression suite that uses <a href="https://code.google.com/p/googletest/">Google Test</a>.
For more information on how to use the regression suite, please see \ref ch11_regression_suite.



\section ch1s3_project_workflow 1.3 Project Workflow
\author Kristofor D. Carlson
\author Ting-Shuo Chou

A sample "Hello World" project is provided in the <tt>projects/hello_world</tt> directory.
The project includes a single source file <tt>main_hello_world.cpp</tt> that creates a network with two groups,
connected with random weights, and can be used as a skeleton to create new projects.

Any output files created by the simulation will be automatically placed in the <tt>results/</tt> directory.

All MATLAB scripts should be placed in the <tt>scripts/</tt> directory.
This directory already contains two MATLAB scripts to aid in using the OAT (see \ref ch9_matlab_oat).
The script <tt>initOAT.m</tt> adds the OAT directory to the MATLAB path, whereas <tt>demoOAT.m</tt> will open a
NetworkMonitor to visualize network activity.
Note that for <tt>demoOAT.m</tt> to work, the executable must be run first
(see \ref ch1s3s1s1_linux_hello_world_compile and \ref ch1s3s2s1_win_hello_world_compile below).
In order to run the OAT, open MATLAB, change to <tt>projects/hello_world/scripts/</tt>, then type:
\code
>> initOAT     % adds OAT relative path to MATLAB paths
>> demoOAT     % opens a NetworkMonitor on the simulation file
\endcode


\subsection ch1s3s1_linux_project_workflow 1.3.1 Linux / Mac OS X

\subsubsection ch1s3s1s1_linux_hello_world_compile 1.3.1.1 Compiling and Running the "Hello World" Project in Linux / Mac OS X

The "Hello World" project comes with its own Makefile that compiles the file <tt>main_hello_world.cpp</tt> and links
it with the CARLsim library. The project can be compiled and run with the following set of commands:
\code
$ cd projects/hello_world
$ make
$ ./hello_world
\endcode

Any output files created by the simulation will be automatically placed in the <tt>results/</tt> directory.
This may include any spike files created by SpikeMonitor, a debug log file, and a network structure file.

All local objects and executables can be deleted via:
\code
$ make clean
\endcode

All output files, including local objects, executables, and files in the <tt>results/</tt> directory can be deleted via:
\code
$ make distclean
\endcode

\warning When <tt>make distclean</tt> is called, all data files in the results directory will be deleted!


\subsubsection ch1s3s1s2_linux_create_new 1.3.1.2 Creating a New Project in Linux / Mac OS X

The easiest way to create a new project in Linux/Mac OS X is to make a copy of the
<tt>projects/hello_world/</tt> directory
and all its corresponding subdirectories, rename the directory accordingly, and place it alongside
<tt>hello_world/</tt> in the <tt>projects/</tt> directory.
Then only minimal changes to the Makefile must be made in order for the project to compile correctly.

The Makefile provided in the directory was made so that users only have to modify a small portion of the file
to build a custom project.
Below is the modifiable portion of the Makefile:
\code
# Makefile for building project program from the CARLsim library

# NOTE: if you are compiling your code in a directory different from
# examples/<example_name> or projects/<project_name> then you need to either
# move the configured user.mk file to this directory or set the path to
# where CARLsim can find the user.mk.
USER_MK_PATH = ../../
include $(USER_MK_PATH)user.mk

project := hello_world
output := *.dot *.dat *.log *.csv
\endcode
The <tt>USER_MK_PATH</tt> variable points to the <tt>user.mk</tt> file in the CARLsim root directory.
This file is needed because it contains all necessary compilation and linking flags.
If the <tt>user.mk</tt> is moved to a different location, the <tt>USER_MK_PATH</tt> needs to be updated
accordingly.

The name of the project can be changed via variable <tt>project</tt>.
Whatever string is assigned here will influence the name of the Makefile target as well as the name of
the C++ source file. For example, setting <tt>project</tt> to "hello_world" will assume that a source
file <tt>main_hello_world.cpp</tt> exists, and will create an executable called <tt>hello_world</tt>.

Finally, files and/or file extensions to be deleted with the <tt>make clean</tt> and <tt>make distclean</tt>
commands can be edited by changing the <tt>output</tt> variable.

\note The C++ source file must be named <tt>main_{project name}.cpp</tt> for the Makefile to compile correctly,
where <tt>{project_name}</tt> is the string assigned to the <tt>project</tt> variable in the Makefile.



\subsection ch1s3s2_windows_project_workflow 1.3.2 Windows

\subsubsection ch1s3s2s1_win_hello_world_compile 1.3.2.1 Compiling and Running the "Hello World" Project in Windows

The "Hello World" project comes with its own <tt>.vcxproj</tt> project file that has already been added
to the <tt>CARLsim.sln</tt> solution file.
Thus the project can be built simply by opening the <tt>CARLsim.sln</tt> solution file in VS, right-clicking the
project directory and choosing "Build project".


\subsubsection ch1s3s2s1_win_create_new 1.3.2.2 Creating a New Project in Windows

The easiest way to create new project in Windows is to make a copy of the directory <tt>projects/hello_world</tt>
and all its corresponding subdirectories, to rename the directory accordingly, and to place it alongside
<tt>hello_world/</tt> in the <tt>projects/</tt> directory.
Then only minimal changes to the project and solution file need to be made in order for the project to
compile correctly.

First, the project file in the new project directory needs to be named according to the new project name:
<tt>{project name}.vcxproj</tt>.
The C++ source file should be renamed for consistency: <tt>main_{project name}.cpp</tt>.

Second, the projects file needs to be added to the <tt>CARLsim.sln</tt> solution file.

Then the new project is ready to be built, rebuilt, or cleaned directly through VS.

\since v3.0


\section ch1s4_uninstallation 1.4 Uninstallation
\author Michael Beyeler


\subsection ch1s4s1_linux 1.4.1 Linux / Mac OS X

To uninstall CARLsim on a Unix platform, open a terminal, navigate to the CARLsim root directory, and type:
\code
$ sudo make uninstall
\endcode

This will remove the directory pointed to by the environment variable <tt>CARLSIM_LIB_DIR</tt>.
By default, this variable points to the location <tt>"/opt/CARL/CARLsim"</tt>.

\note Any environments that have been added to <tt>~/.bashrc</tt> must be removed manually.
\attention Before uninstalling, make sure that the environment variable <tt>CARLSIM_LIB_DIR</tt> is properly set.


\subsection ch1s4s2_windows 1.4.2 Windows

On Windows, simply move all downloaded and unzipped CARLsim files to the recycle bin.

*/
