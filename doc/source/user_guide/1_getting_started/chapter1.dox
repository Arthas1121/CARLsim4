/*!

\page ch1_getting_started Chapter 1: Getting Started

\tableofcontents

\section ch1s1_preinstallation 1.1 Pre-Installation
\author Kristofor D. Carlson
\author Michael Beyeler

CARLsim runs on both generic x86 CPUs and off-the-shelf NVIDIA GPUs.
Full support of all CARLsim features requires that the NVIDIA CUDA parallel computing platform be installed.
It is now also possible to compile CARLsim without GPU support (see \ref ch1s2s1s3_cpuonly).

CARLsim requires GPUs with a compute capability of 2.0 or higher.
To find the compute capability of your device please refer to the
<a href="http://en.wikipedia.org/wiki/CUDA" target="_blank"><b>CUDA article on Wikipedia</b></a>.

CARLsim also requires CUDA Toolkit 6.0 or higher.
For platform-specific CUDA installation instructions, please navigate to the
<a href="https://developer.nvidia.com/cuda-zone" target="_blank"><b>NVIDIA CUDA Zone</b></a>.

The rest of the chapter assumes you have successfully installed CUDA on appropriate hardware.

\note Please make sure you install the CUDA SDK samples, as CARLsim relies on
the file <tt>helper_cuda.h</tt>, which usually resides in
<tt>/usr/local/cuda/samples/common/inc</tt>.

\subsection ch1s1s1_os 1.1.1 Supported Operating Systems
CARLsim has been tested on the following platforms:
- Windows 10
- Ubuntu 16.04


\subsection ch1s1s2_os 1.1.2 Source Directory Layout
Below is the directory layout of the CARLsim source code.
All source code of the core library is contained in the directory <tt>carlsim</tt>.
The sub-directories are key components to the CARLsim simulation library.

The <tt>doc</tt> directory contains doxygen-related source files in <tt>source</tt> and the
pre-compiled HTML version of the documentation in <tt>html</tt>.

The <tt>projects</tt> directory contains a template for writing your first CARLsim program. Users will
start here when they begin writing their first program.

The <tt>tools</tt> directory contains a
number of CARLsim plugins that may be useful to users such as parameter tuning frameworks, MATLAB
scripts, spike generators, and tools for visual stimuli.

\code
├── carlsim                       # CARLsim source code directory
│   ├── interface                   # CARLsim interface (public user interface)
│   ├── kernel                      # CARLsim core functionality
│   ├── monitor                     # Monitors for groups, connections, spikes, etc.
│   ├── server                      # Utility to implement real-time server functionality
│   └── test                        # Google test regression suite tests
├── doc                           # CARLsim documentation generation directory
│   ├── html                        # Generated documentation in html
│   └── source                      # Documentation source code
├── external                      # External dependencies
│   ├── googletest                  # Google Test framework
├── projects                      # User projects directory
│   └── hello_world                 # Project template for new users
└── tools                         # CARLsim tools that are not built-in
    ├── ecj_pti                     # Automated parameter-tuning interface using ECJ
    ├── eo_pti                      # Automated parameter-tuning interface using EO (deprecated)
    ├── offline_analysis_toolbox    # Collection of MATLAB scripts for data analysis
    ├── simple_weight_tuner         # Simple weight parameter-tuning tool
    ├── spike_generators            # Collection of input spike generation tools
    └── visual_stimulus             # Collection of MATLAB/CARLsim tools for visual stimuli
\endcode

\since v3.0


\section ch1s2_installation 1.2 Installation
\author Kristofor D. Carlson
\author Ting-Shuo Chou
\author Michael Beyeler

CARLsim is now available on <a href="https://github.com/UCI-CARL/CARLsim4">GitHub</a>.

If you are familiar with Git and GitHub, the preferred way to obtain the software
is to fork and clone the GitHub repository.
This will give you a way to access the latest stable and development versions of the code,
and allow you to easily update your codebase later on.

This can be done in three steps:

-# Navigate to CARLsim's
   <a href="https://github.com/UCI-CARL/CARLsim4">GitHub page</a> and click on the
   <a href="https://github.com/UCI-CARL/CARLsim4#fork-destination-box"><tt>Fork</tt></a> box in the
   top-right corner.

-# Switch to a terminal (or <a href="https://desktop.github.com/">GitHub Desktop</a>)
   and clone the repository:
   \code
   $ git clone --recursive https://github.com/UCI-CARL/YourUsername/CARLsim4
   $ cd CARLsim4
   \endcode
   where <tt>YourUsername</tt> is your GitHub user name.
   Note the <tt>--recursive</tt> option: It will make sure all external software
   dependencies get installed (e.g., Google Test).

-# Choose your software version:
   - If you want the latest stable release, switch to the <tt>stable</tt> branch:
     \code
     $ git checkout stable
     \endcode
   - If you want the latest development version, simply stay on the <tt>master</tt>
     branch.

Alternatively, you may download the latest stable release from the 
<a href="https://github.com/UCI-CARL/CARLsim4/releases">GitHub Release</a> page (.zip or .tar.gz).

For installation instructions on Linux and Mac OS X platforms, please refer to \ref ch1s2s1_linux below.
For installation instructions on Windows platforms, please refer to \ref ch1s2s2_windows below.


\subsection ch1s2s1_linux 1.2.1 Linux / Mac OS X

Instructions for Linux/Mac OS X installation assume you are using the Bash shell. Additionally, the
GNU GCC compiler collection and GNU Make build environment should be installed. 
On most platforms, these are already installed by default.


\subsubsection ch1s2s1s1_environment_variables 1.2.1.1 Environment Variables

CARLsim 4 allows configuration via environment variables.
The easiest way to set these is to add them to your
<tt>~/.bashrc</tt> file.

The following options are available:

- Installation directory: By default, the CARLsim library lives in <tt>/usr/local/lib</tt>,
  and CARLsim include files live in <tt>/usr/local/include/carlsim</tt>.
  You can overwrite these by exporting an evironment variable called
  <tt>CARLSIM4_INSTALL_DIR</tt>:
  \code
  $ export CARLSIM4_INSTALL_DIR=/path/to/your/preferred/location
  \endcode

- GPU support: By default, CARLsim comes with CUDA support.
  Obviously, this requires CUDA to be installed first.
  If you want to run CARLsim without GPU support, you need to export an
  environment variable called <tt>CARLSIM4_NO_CUDA</tt> and set it to 1:
  \code
  $ export CARLSIM4_NO_CUDA=1
  \endcode

- Custom CUDA paths: By default, CARLsim assumes that your CUDA library lives in
  <tt>/usr/local/cuda</tt>. If this is not the case on your system, make sure to
  set adjust an environment variable called <tt>CUDA_PATH</tt>:
  \code
  $ export CUDA_PATH=/path/to/CUDA
  \endcode

- ECJ support: By default, CARLsim assumes that the Parameter Tuning Interface
  lives in <tt>/opt/CARL/carlsim_ecj_pti</tt>, with the JAR file located at
  <tt>/opt/ecj/jar/ecj.23.jar</tt>. If these paths are not correct and you wish
  to use the Parameter Tuning Interface (see \ref ch10_ecj), please update
  your environment variables accordingly:
  \code
  $ export ECJ_JAR=/path/to/ECJ/JAR/file
  $ export ECJ_PTI_DIR=/path/to/ECJ/PTI
  \endcode

- Code coverage: If you are a CARLsim developer, you can run the regression
  suite and generate a code coverage report using an environment variable
  called <tt>CARLSIM4_COVERAGE</tt>:
  \code
  $ export CARLSIM4_COVERAGE=1
  \endcode
  The whole procedure is described in ch11s4_coverage.


Once you have made changes to your <tt>~/.bashrc</tt>, make sure they go into
effect by either typing:
\code
$ source ~/.bashrc
\endcode
or by closing the shell and opening another one.

Older versions of CARLsim used a configuration file called <tt>user.mk</tt>.
This file is obsolete as of CARLsim 3.1.2.



\subsubsection ch1s2s1s2_cuda_version 1.2.1.2 Finding CUDA Toolkit Version and Compute Capability

The CUDA Toolkit version can be found via:
\code
$ nvcc --version
\endcode
You need only input the major number of the toolkit version
(e.g. 6 for 6.5).

The compute capability of the GPU device can be found by compiling the <tt>deviceQuery</tt> sample in 
the directory <tt>1_Utilities</tt> of the CUDA Toolkit.
\code
# copy NVIDIA Toolkit to home directory
$ cd /usr/local/cuda/bin
$ ./cuda-install-samples-6.5.sh ~
$ cd ~/NVIDIA_CUDA-6.5_Samples/1_Utilities/deviceQuery

# compile and run deviceQuery
$ make
$ ./deviceQuery
\endcode
For CUDA Toolkits other than version 6.5, the paths above need to be changed accordingly.

\note Please make sure you install the CUDA SDK samples, as CARLsim relies on
the file <tt>helper_cuda.h</tt>, which usually resides in
<tt>/usr/local/cuda/samples/common/inc</tt>.


\subsubsection ch1s2s1s3_cpuonly 1.2.1.3 Installing CARLsim Without GPU Support

As mentioned above,
GPU support can be disabled by exporting an environment
variable called <tt>CARLSIM4_NO_CUDA</tt> and by setting it to 1:
\code
$ export CARLSIM4_NO_CUDA=1
\endcode

In this case, the NVIDIA CUDA toolkit is not required.
But, obviously you will not be able to run CARLsim in ::GPU_MODE.

\see \ref ch1s2s1s1_environment_variables


\subsubsection ch1s2s1s4_compiling 1.2.1.4 Compiling the CARLsim Library

When it comes to compiling and installing CARLsim, you have two options:

-# Install a <tt>release</tt> version:
   \code
   $ make -j4
   $ sudo -E make install
   \endcode
   This will enable hardware accelerations using the <tt>-O3</tt> and
   <tt>-ffast-math</tt> compile flags.

-# Install a <tt>debug</tt> version:
   \code
   $ make debug -j4
   $ sudo -E make install
   \endcode
   This will disable hardware accelerations (via <tt>-O0</tt>) and enable
   extensive debug prints (via <tt>-g -Wall</tt>).

\note Note the <tt>-E</tt> flag in the commands above,
which will cause <tt>sudo</tt> to remember any environment
variables you set above (such as <tt>CARLSIM4_INSTALL_DIR</tt> and
<tt>CARLSIM4_NO_CUDA</tt>).
You don't need this flag if you're not installing with <tt>sudo</tt>.

\note Also, note the <tt>-j4</tt> flag, which will install CARLsim using
four workers.
You can increase the number on systems with more than four cores if you wish,
or omit the flag if you're working on a single-core machine.



CARLsim comes with an optional automated parameter tuning framework. For more information about
how to install the framework please see \ref ch10_ecj. Additionally, CARLsim now comes with a
regression suite that uses <a href="https://code.google.com/p/googletest/">Google Test</a>.
For more information on how to use the regression suite, please see \ref ch11_regression_suite.

\since v3.1


\subsubsection ch1s2s1s5_verifying 1.2.1.5 Verifying the Installation

In order to make sure the installation was successful,
you can run the regression suite:

\code
$ make test
$ ./carlsim/test_carlsim_tests
\endcode

For more information on the regression suite, please refer to
\ref ch11_regression_suite.



\subsection ch1s2s2_windows 1.2.2 Windows

CARLsim provides solution files for Microsoft Visual Studio (VS) 2012 and CUDA 5.5.
The solution file is called <tt>CARLsim.sln</tt> and is located in the CARLsim root directory.
In addition, every project, tutorial, and the regression suite have their own .vcxproj projects file
in the appropriate directory.

Before building the solution, <tt>Configuration</tt> should be set to <tt>x64</tt>.
<tt>Release</tt> should be selected for project executables, and <tt>Debug</tt> should be selected
for compiling the regression suite.

VS 2012 will then generate all executables (.exe) and the static library (.lib) via "Build Solution".

Newer VS versions will automatically upgrade the solution file (<tt>CARLsim.sln</tt>) and all project files
(<tt>*.vcxproj</tt>).
For newer CUDA Toolkit versions, the strings "CUDA 5.5.props" and "CUDA 5.5.targets" that are present in
every .vcxproj file have to be manually updated to reflect the right CUDA Toolkit version number.

CARLsim comes with an optional automated parameter tuning framework. For more information about
how to install the framework please see \ref ch10_ecj. Additionally, CARLsim now comes with a
regression suite that uses <a href="https://code.google.com/p/googletest/">Google Test</a>.
For more information on how to use the regression suite, please see \ref ch11_regression_suite.



\section ch1s3_project_workflow 1.3 Project Workflow
\author Kristofor D. Carlson
\author Ting-Shuo Chou

A sample "Hello World" project is provided in the <tt>projects/hello_world</tt> directory.
The project includes a single source file <tt>main_hello_world.cpp</tt> that creates a network with two groups,
connected with random weights, and can be used as a skeleton to create new projects.

Any output files created by the simulation will be automatically placed in the <tt>results/</tt> directory.

All MATLAB scripts should be placed in the <tt>scripts/</tt> directory.
This directory already contains two MATLAB scripts to aid in using the OAT (see \ref ch9_matlab_oat).
The script <tt>initOAT.m</tt> adds the OAT directory to the MATLAB path, whereas <tt>demoOAT.m</tt> will open a
NetworkMonitor to visualize network activity.
Note that for <tt>demoOAT.m</tt> to work, the executable must be run first
(see \ref ch1s3s1s1_linux_hello_world_compile and \ref ch1s3s2s1_win_hello_world_compile below).
In order to run the OAT, open MATLAB, change to <tt>projects/hello_world/scripts/</tt>, then type:
\code
>> initOAT     % adds OAT relative path to MATLAB paths
>> demoOAT     % opens a NetworkMonitor on the simulation file
\endcode


\subsection ch1s3s1_linux_project_workflow 1.3.1 Linux / Mac OS X

\subsubsection ch1s3s1s1_linux_hello_world_compile 1.3.1.1 Compiling and Running the "Hello World" Project in Linux / Mac OS X

The "Hello World" project comes with its own Makefile that compiles the file <tt>main_hello_world.cpp</tt> and links
it with the CARLsim library. The project can be compiled and run with the following set of commands:
\code
$ cd projects/hello_world
$ make
$ ./hello_world
\endcode

Any output files created by the simulation will be automatically placed in the <tt>results/</tt> directory.
This may include any spike files created by SpikeMonitor, a debug log file, and a network structure file.

All local objects and executables can be deleted via:
\code
$ make clean
\endcode

All output files, including local objects, executables, and files in the <tt>results/</tt> directory can be deleted via:
\code
$ make distclean
\endcode

\warning When <tt>make distclean</tt> is called, all data files in the results directory will be deleted!


\subsubsection ch1s3s1s2_linux_create_new 1.3.1.2 Creating a New Project in Linux / Mac OS X

The easiest way to create a new project in Linux/Mac OS X is to make a copy of the
<tt>projects/hello_world/</tt> directory
and all its corresponding subdirectories, rename the directory accordingly, and place it alongside
<tt>hello_world/</tt> in the <tt>projects/</tt> directory.
Then only minimal changes to the Makefile must be made in order for the project to compile correctly.

The Makefile provided in the directory was made so that users only have to modify a small portion of the file
to build a custom project.
Below is the modifiable portion of the Makefile:
\code
# Makefile for building project program from the CARLsim library

# NOTE: if you are compiling your code in a directory different from
# examples/<example_name> or projects/<project_name> then you need to either
# move the configured user.mk file to this directory or set the path to
# where CARLsim can find the user.mk.
USER_MK_PATH = ../../
include $(USER_MK_PATH)user.mk

project := hello_world
output := *.dot *.dat *.log *.csv
\endcode
The <tt>USER_MK_PATH</tt> variable points to the <tt>user.mk</tt> file in the CARLsim root directory.
This file is needed because it contains all necessary compilation and linking flags.
If the <tt>user.mk</tt> is moved to a different location, the <tt>USER_MK_PATH</tt> needs to be updated
accordingly.

The name of the project can be changed via variable <tt>project</tt>.
Whatever string is assigned here will influence the name of the Makefile target as well as the name of
the C++ source file. For example, setting <tt>project</tt> to "hello_world" will assume that a source
file <tt>main_hello_world.cpp</tt> exists, and will create an executable called <tt>hello_world</tt>.

Finally, files and/or file extensions to be deleted with the <tt>make clean</tt> and <tt>make distclean</tt>
commands can be edited by changing the <tt>output</tt> variable.

\note The C++ source file must be named <tt>main_{project name}.cpp</tt> for the Makefile to compile correctly,
where <tt>{project_name}</tt> is the string assigned to the <tt>project</tt> variable in the Makefile.



\subsection ch1s3s2_windows_project_workflow 1.3.2 Windows

\subsubsection ch1s3s2s1_win_hello_world_compile 1.3.2.1 Compiling and Running the "Hello World" Project in Windows

The "Hello World" project comes with its own <tt>.vcxproj</tt> project file that has already been added
to the <tt>CARLsim.sln</tt> solution file.
Thus the project can be built simply by opening the <tt>CARLsim.sln</tt> solution file in VS, right-clicking the
project directory and choosing "Build project".


\subsubsection ch1s3s2s1_win_create_new 1.3.2.2 Creating a New Project in Windows

The easiest way to create new project in Windows is to make a copy of the directory <tt>projects/hello_world</tt>
and all its corresponding subdirectories, to rename the directory accordingly, and to place it alongside
<tt>hello_world/</tt> in the <tt>projects/</tt> directory.
Then only minimal changes to the project and solution file need to be made in order for the project to
compile correctly.

First, the project file in the new project directory needs to be named according to the new project name:
<tt>{project name}.vcxproj</tt>.
The C++ source file should be renamed for consistency: <tt>main_{project name}.cpp</tt>.

Second, the projects file needs to be added to the <tt>CARLsim.sln</tt> solution file.

Then the new project is ready to be built, rebuilt, or cleaned directly through VS.

\since v3.0


\section ch1s4_uninstallation 1.4 Uninstallation
\author Michael Beyeler


\subsection ch1s4s1_linux 1.4.1 Linux / Mac OS X

To uninstall CARLsim on a Unix platform, open a terminal, navigate to the CARLsim root directory, and type:
\code
$ sudo make uninstall
\endcode

This will remove the directory pointed to by the environment variable <tt>CARLSIM_LIB_DIR</tt>.
By default, this variable points to the location <tt>"/opt/CARL/CARLsim"</tt>.

\note Any environments that have been added to <tt>~/.bashrc</tt> must be removed manually.
\attention Before uninstalling, make sure that the environment variable <tt>CARLSIM_LIB_DIR</tt> is properly set.


\subsection ch1s4s2_windows 1.4.2 Windows

On Windows, simply move all downloaded and unzipped CARLsim files to the recycle bin.

*/

